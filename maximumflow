// #include <ext/pb_ds/assoc_container.hpp>
#include<bits/stdc++.h>
 
// using namespace __gnu_pbds;
using namespace std;
 
// #define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define            fi first
#define            se second
#define            db double
#define            ll long long
#define           ull unsigned long long
#define           ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define     inpout(a) freopen(a".inp","r",stdin),freopen(a".out","w",stdout)
#define           int ll
 
template<class A,class B> inline void maximize(A& x, B y) {x = max(x, y);};
template<class A,class B> inline void minimize(A& x, B y) {x = min(x, y);};
 
const long long INF = 1e18;
const long long mod = 1e9 + 7;
const int N = 550;
 
//int dx[8] = {0, 0, 1, -1, 1, 1, -1, -1};
//int dy[8] = {-1, 1, 0, 0, -1, 1, -1, 1};
 
int n, m;
 
struct maximumFlow {
 
    vector<int> idEdge[N];
    int trace[N];
    int s, t;
    int maximumflow;

    struct flowEdge {

        int u, v, flow;

    };

    vector<flowEdge> edge;

    maximumFlow () {
 
        maximumflow = 0;
 
    }
 
    void updateSourceSink(int source, int sink) {
 
        s = source;
        t = sink;
 
    }
 
    void addEdge(int u, int v, int c) {
 
        flowEdge Edge;

        Edge = {u, v, c};
        edge.push_back(Edge);
        idEdge[u].push_back(edge.size() - 1);

        Edge = {v, u, 0};
        edge.push_back(Edge);
        idEdge[v].push_back(edge.size() - 1);

    }
 
    void bfs(int u) {

        queue<int> q;
        q.push(u);

        while (!q.empty()) {

            int u = q.front();
            q.pop();

            for (int x : idEdge[u])
                if (trace[edge[x].v] == -1 && edge[x].flow) {
    
                    trace[edge[x].v] = x;
                    q.push(edge[x].v);
    
                }

        }

    }
 
    bool increaseFlow() {
 
        for (int i = 1; i <= n; i++)
            trace[i] = -1;
        trace[s] = 0;
 
        bfs(s);

        if (trace[t] == -1)
            return false;
 
        vector<int> V;
 
        int increase = INF;

        int sink = t;
        while (sink != s) {
 
            minimize(increase, edge[trace[sink]].flow);
            V.push_back(trace[sink]);
            sink = edge[trace[sink]].u;

        }

        for (int x : V) {

            edge[x].flow -= increase;
            edge[x ^ 1].flow += increase;

        }
 
        maximumflow += increase;
 
        return increase;
 
    }
 
    int Maching() {
 
        do {
 
            if (!increaseFlow()) 
                break;
 
        } while (true);
 
        return maximumflow;
 
    }
 
} flow;
 
 
void komasan() {
 
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
 
        int u, v, c;
        cin >> u >> v >> c;
        flow.addEdge(u, v, c);
 
    } 
 
    flow.updateSourceSink(1, n);
 
    cout << flow.Maching();
 
}
 
int32_t main() {
    ios;
    //inpout("");
    komasan();
 
}