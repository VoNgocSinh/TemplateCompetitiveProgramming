#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace __gnu_pbds;
using namespace std;

#define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define            pb push_back
#define            fi first
#define            se second
#define            ll long long
#define           ios ios_base::sync_with_stdio(0);cin.tie();cout.tie();
#define     inpout(a) freopen(a".inp","r",stdin),freopen(a".out","w",stdout)
#define           int ll
ll INF = 1e18;
ll mod = 1e9+7;

int n,q,u,v,Add[100001],Ed[100001],Par[100001],St[100001],Val[1000001],sz;
vector<int> edge[100001];

struct Seg
{

    int Val[100001],ValIT[400001];

    void unique(int n){

        for (int i=1;i<=n;i++) Val[i] = INF;

    }

    void build(int id,int l,int r)
    {

        if (l==r)
        {

            ValIT[id] = Val[l];
            return;

        }

        int g = (l+r)/2;

        build(id*2,l,g);
        build(id*2+1,g+1,r);

        ValIT[id] = min(ValIT[id*2],ValIT[id*2+1]);

    }

     void update(int id,int l,int r,int p)
     {

        if (p<l || p>r) return;
        if (l==r)
        {

            ValIT[id] = Val[p];
            return;

        }        

        int g = (l+r)/2;
        update(id*2,l,g,p);
        update(id*2+1,g+1,r,p);
        ValIT[id] = min(ValIT[id*2],ValIT[id*2+1]);

     }

     int get(int id,int l,int r,int u,int v){

        if (r<u || l>v) return INF;
        if (l>=u && r<=v) return ValIT[id];

        int g = (l+r)/2;

        return min(get(id*2,l,g,u,v),get(id*2+1,g+1,r,u,v));

     }


} IT;

void hld(int u,int par)
{

    ++sz;
    int cm = 0;
    Add[sz] = u;
    Ed[u] = sz;
    Par[u] = par;

    for (int x:edge[u])
        if (x!=par)
        {

            St[x] = !cm ? St[u] : x;
            hld(x,u);
            cm++;

        }

}

void solve()
{

    cin >> n >> q;

    for (int i=1;i<n;i++) cin >> u >> v,edge[u].pb(v),edge[v].pb(u);

    St[1] = 1;

    hld(1,0);

    IT.unique(1e5);
    IT.build(1,1,n);

    for (int i=1;i<=q;i++)
    {

        cin >> v >> u;
        if (!v)
        {

            Val[u] = !Val[u];
            if (Val[u]) IT.Val[Ed[u]] = Ed[u],IT.update(1,1,n,Ed[u]);
            else IT.Val[Ed[u]] = INF,IT.update(1,1,n,Ed[u]);

        } else 
        {

            int res = INF;

            while (u){

                res = min(res,IT.get(1,1,n,Ed[St[u]],Ed[u]));
                
                u = Par[St[u]];

            }            

            if (res==INF) cout << -1 << endl;
            else cout << Add[res] << endl;

        }

    }

    // for (int i=1;i<=n;i++) cout << IT.Val[i] << endl;


}

int32_t main()
{
    ios;
    #ifndef ONLINE_JUDGE
        
        inpout("filename");
    
    #endif
    solve();
}
